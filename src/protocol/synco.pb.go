// Code generated by protoc-gen-gogo.
// source: synco.proto
// DO NOT EDIT!

/*
	Package protocol is a generated protocol buffer package.

	It is generated from these files:
		synco.proto

	It has these top-level messages:
		Event
		TimeChangeEvent
		ReadyEvent
		GoEvent
		HelloEvent
		PingEvent
*/
package protocol

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Event struct {
	Reason string           `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	Time   *TimeChangeEvent `protobuf:"bytes,2,opt,name=time" json:"time,omitempty"`
	Ready  *ReadyEvent      `protobuf:"bytes,3,opt,name=ready" json:"ready,omitempty"`
	Go     *GoEvent         `protobuf:"bytes,4,opt,name=go" json:"go,omitempty"`
	Hello  *HelloEvent      `protobuf:"bytes,5,opt,name=hello" json:"hello,omitempty"`
	Ping   *PingEvent       `protobuf:"bytes,6,opt,name=ping" json:"ping,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptorSynco, []int{0} }

func (m *Event) GetTime() *TimeChangeEvent {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *Event) GetReady() *ReadyEvent {
	if m != nil {
		return m.Ready
	}
	return nil
}

func (m *Event) GetGo() *GoEvent {
	if m != nil {
		return m.Go
	}
	return nil
}

func (m *Event) GetHello() *HelloEvent {
	if m != nil {
		return m.Hello
	}
	return nil
}

func (m *Event) GetPing() *PingEvent {
	if m != nil {
		return m.Ping
	}
	return nil
}

type TimeChangeEvent struct {
	Where float64 `protobuf:"fixed64,1,opt,name=where,proto3" json:"where,omitempty"`
}

func (m *TimeChangeEvent) Reset()                    { *m = TimeChangeEvent{} }
func (m *TimeChangeEvent) String() string            { return proto.CompactTextString(m) }
func (*TimeChangeEvent) ProtoMessage()               {}
func (*TimeChangeEvent) Descriptor() ([]byte, []int) { return fileDescriptorSynco, []int{1} }

type ReadyEvent struct {
	ClientReady bool `protobuf:"varint,1,opt,name=client_ready,json=clientReady,proto3" json:"client_ready,omitempty"`
}

func (m *ReadyEvent) Reset()                    { *m = ReadyEvent{} }
func (m *ReadyEvent) String() string            { return proto.CompactTextString(m) }
func (*ReadyEvent) ProtoMessage()               {}
func (*ReadyEvent) Descriptor() ([]byte, []int) { return fileDescriptorSynco, []int{2} }

type GoEvent struct {
	Playback bool `protobuf:"varint,1,opt,name=playback,proto3" json:"playback,omitempty"`
}

func (m *GoEvent) Reset()                    { *m = GoEvent{} }
func (m *GoEvent) String() string            { return proto.CompactTextString(m) }
func (*GoEvent) ProtoMessage()               {}
func (*GoEvent) Descriptor() ([]byte, []int) { return fileDescriptorSynco, []int{3} }

type HelloEvent struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *HelloEvent) Reset()                    { *m = HelloEvent{} }
func (m *HelloEvent) String() string            { return proto.CompactTextString(m) }
func (*HelloEvent) ProtoMessage()               {}
func (*HelloEvent) Descriptor() ([]byte, []int) { return fileDescriptorSynco, []int{4} }

type PingEvent struct {
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *PingEvent) Reset()                    { *m = PingEvent{} }
func (m *PingEvent) String() string            { return proto.CompactTextString(m) }
func (*PingEvent) ProtoMessage()               {}
func (*PingEvent) Descriptor() ([]byte, []int) { return fileDescriptorSynco, []int{5} }

func init() {
	proto.RegisterType((*Event)(nil), "protocol.Event")
	proto.RegisterType((*TimeChangeEvent)(nil), "protocol.TimeChangeEvent")
	proto.RegisterType((*ReadyEvent)(nil), "protocol.ReadyEvent")
	proto.RegisterType((*GoEvent)(nil), "protocol.GoEvent")
	proto.RegisterType((*HelloEvent)(nil), "protocol.HelloEvent")
	proto.RegisterType((*PingEvent)(nil), "protocol.PingEvent")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Synco service

type SyncoClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (Synco_ConnectClient, error)
}

type syncoClient struct {
	cc *grpc.ClientConn
}

func NewSyncoClient(cc *grpc.ClientConn) SyncoClient {
	return &syncoClient{cc}
}

func (c *syncoClient) Connect(ctx context.Context, opts ...grpc.CallOption) (Synco_ConnectClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Synco_serviceDesc.Streams[0], c.cc, "/protocol.Synco/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &syncoConnectClient{stream}
	return x, nil
}

type Synco_ConnectClient interface {
	Send(*Event) error
	Recv() (*Event, error)
	grpc.ClientStream
}

type syncoConnectClient struct {
	grpc.ClientStream
}

func (x *syncoConnectClient) Send(m *Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *syncoConnectClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Synco service

type SyncoServer interface {
	Connect(Synco_ConnectServer) error
}

func RegisterSyncoServer(s *grpc.Server, srv SyncoServer) {
	s.RegisterService(&_Synco_serviceDesc, srv)
}

func _Synco_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SyncoServer).Connect(&syncoConnectServer{stream})
}

type Synco_ConnectServer interface {
	Send(*Event) error
	Recv() (*Event, error)
	grpc.ServerStream
}

type syncoConnectServer struct {
	grpc.ServerStream
}

func (x *syncoConnectServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func (x *syncoConnectServer) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Synco_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Synco",
	HandlerType: (*SyncoServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Synco_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "synco.proto",
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSynco(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	if m.Time != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSynco(dAtA, i, uint64(m.Time.Size()))
		n1, err := m.Time.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Ready != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSynco(dAtA, i, uint64(m.Ready.Size()))
		n2, err := m.Ready.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Go != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSynco(dAtA, i, uint64(m.Go.Size()))
		n3, err := m.Go.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Hello != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSynco(dAtA, i, uint64(m.Hello.Size()))
		n4, err := m.Hello.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Ping != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSynco(dAtA, i, uint64(m.Ping.Size()))
		n5, err := m.Ping.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *TimeChangeEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeChangeEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Where != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Synco(dAtA, i, uint64(math.Float64bits(float64(m.Where))))
	}
	return i, nil
}

func (m *ReadyEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadyEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ClientReady {
		dAtA[i] = 0x8
		i++
		if m.ClientReady {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GoEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Playback {
		dAtA[i] = 0x8
		i++
		if m.Playback {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *HelloEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelloEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSynco(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *PingEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSynco(dAtA, i, uint64(m.Nonce))
	}
	return i, nil
}

func encodeFixed64Synco(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Synco(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSynco(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Event) Size() (n int) {
	var l int
	_ = l
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovSynco(uint64(l))
	}
	if m.Time != nil {
		l = m.Time.Size()
		n += 1 + l + sovSynco(uint64(l))
	}
	if m.Ready != nil {
		l = m.Ready.Size()
		n += 1 + l + sovSynco(uint64(l))
	}
	if m.Go != nil {
		l = m.Go.Size()
		n += 1 + l + sovSynco(uint64(l))
	}
	if m.Hello != nil {
		l = m.Hello.Size()
		n += 1 + l + sovSynco(uint64(l))
	}
	if m.Ping != nil {
		l = m.Ping.Size()
		n += 1 + l + sovSynco(uint64(l))
	}
	return n
}

func (m *TimeChangeEvent) Size() (n int) {
	var l int
	_ = l
	if m.Where != 0 {
		n += 9
	}
	return n
}

func (m *ReadyEvent) Size() (n int) {
	var l int
	_ = l
	if m.ClientReady {
		n += 2
	}
	return n
}

func (m *GoEvent) Size() (n int) {
	var l int
	_ = l
	if m.Playback {
		n += 2
	}
	return n
}

func (m *HelloEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSynco(uint64(l))
	}
	return n
}

func (m *PingEvent) Size() (n int) {
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovSynco(uint64(m.Nonce))
	}
	return n
}

func sovSynco(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSynco(x uint64) (n int) {
	return sovSynco(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSynco
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSynco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSynco
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSynco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSynco
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Time == nil {
				m.Time = &TimeChangeEvent{}
			}
			if err := m.Time.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ready", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSynco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSynco
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ready == nil {
				m.Ready = &ReadyEvent{}
			}
			if err := m.Ready.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Go", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSynco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSynco
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Go == nil {
				m.Go = &GoEvent{}
			}
			if err := m.Go.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hello", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSynco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSynco
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hello == nil {
				m.Hello = &HelloEvent{}
			}
			if err := m.Hello.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSynco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSynco
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ping == nil {
				m.Ping = &PingEvent{}
			}
			if err := m.Ping.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSynco(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSynco
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeChangeEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSynco
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeChangeEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeChangeEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Where", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Where = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipSynco(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSynco
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadyEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSynco
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadyEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadyEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientReady", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSynco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClientReady = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSynco(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSynco
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSynco
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Playback", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSynco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Playback = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSynco(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSynco
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HelloEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSynco
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelloEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelloEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSynco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSynco
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSynco(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSynco
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PingEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSynco
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSynco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSynco(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSynco
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSynco(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSynco
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSynco
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSynco
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSynco
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSynco
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSynco(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSynco = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSynco   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("synco.proto", fileDescriptorSynco) }

var fileDescriptorSynco = []byte{
	// 339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0xd1, 0xcd, 0x4a, 0xc3, 0x40,
	0x10, 0x07, 0xf0, 0x6e, 0x4c, 0xfa, 0x31, 0x15, 0xab, 0x63, 0x91, 0x58, 0x24, 0xb4, 0x0b, 0xd2,
	0x22, 0x58, 0xb5, 0xde, 0x3c, 0x5a, 0x44, 0x8f, 0x12, 0xbd, 0x4b, 0x9a, 0x2e, 0xe9, 0x62, 0xba,
	0x5b, 0xd2, 0xa0, 0xf4, 0x2d, 0x7c, 0x2c, 0x8f, 0x3e, 0x82, 0xd4, 0x37, 0xf0, 0x09, 0x64, 0x3f,
	0xec, 0x42, 0x4f, 0x61, 0x86, 0xdf, 0x0c, 0xff, 0xc9, 0x42, 0x73, 0xb9, 0x12, 0xa9, 0x1c, 0x2e,
	0x0a, 0x59, 0x4a, 0xac, 0xeb, 0x4f, 0x2a, 0x73, 0xfa, 0x4b, 0x20, 0xb8, 0x7b, 0x63, 0xa2, 0xc4,
	0x23, 0xa8, 0x16, 0x2c, 0x59, 0x4a, 0x11, 0x92, 0x2e, 0x19, 0x34, 0x62, 0x5b, 0xe1, 0x39, 0xf8,
	0x25, 0x9f, 0xb3, 0xd0, 0xeb, 0x92, 0x41, 0x73, 0x74, 0x3c, 0xfc, 0x1f, 0x1d, 0x3e, 0xf3, 0x39,
	0x1b, 0xcf, 0x12, 0x91, 0x31, 0xbd, 0x20, 0xd6, 0x0c, 0xcf, 0x20, 0x28, 0x58, 0x32, 0x5d, 0x85,
	0x3b, 0xda, 0xb7, 0x9d, 0x8f, 0x55, 0xdb, 0x50, 0x43, 0xb0, 0x07, 0x5e, 0x26, 0x43, 0x5f, 0xc3,
	0x03, 0x07, 0xef, 0xa5, 0x51, 0x5e, 0x26, 0xd5, 0xba, 0x19, 0xcb, 0x73, 0x19, 0x06, 0xdb, 0xeb,
	0x1e, 0x54, 0xdb, 0xae, 0xd3, 0x04, 0xfb, 0xe0, 0x2f, 0xb8, 0xc8, 0xc2, 0xaa, 0xa6, 0x87, 0x8e,
	0x3e, 0x72, 0x91, 0xd9, 0x8c, 0x0a, 0xd0, 0x3e, 0xb4, 0xb6, 0xc2, 0x63, 0x1b, 0x82, 0xf7, 0x19,
	0x2b, 0x98, 0x3e, 0x9e, 0xc4, 0xa6, 0xa0, 0x17, 0x00, 0x2e, 0x35, 0xf6, 0x60, 0x37, 0xcd, 0x39,
	0x13, 0xe5, 0x8b, 0xb9, 0x50, 0xd1, 0x7a, 0xdc, 0x34, 0x3d, 0xed, 0xe8, 0x29, 0xd4, 0x6c, 0x7a,
	0xec, 0x40, 0x7d, 0x91, 0x27, 0xab, 0x49, 0x92, 0xbe, 0x5a, 0xb9, 0xa9, 0xe9, 0x09, 0x80, 0x8b,
	0x8f, 0x7b, 0xe0, 0xf1, 0xa9, 0xfd, 0xeb, 0x1e, 0x9f, 0xd2, 0x1e, 0x34, 0x36, 0x89, 0x55, 0x30,
	0x21, 0x45, 0x6a, 0x82, 0xf9, 0xb1, 0x29, 0x46, 0x37, 0x10, 0x3c, 0xa9, 0xf7, 0xc4, 0x2b, 0xa8,
	0x8d, 0xa5, 0x10, 0x2c, 0x2d, 0xb1, 0xe5, 0x0e, 0xd6, 0xa3, 0x9d, 0xed, 0x06, 0xad, 0x0c, 0xc8,
	0x25, 0xb9, 0xdd, 0xff, 0x5c, 0x47, 0xe4, 0x6b, 0x1d, 0x91, 0xef, 0x75, 0x44, 0x3e, 0x7e, 0xa2,
	0xca, 0xa4, 0xaa, 0xdd, 0xf5, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf3, 0xee, 0x39, 0x72, 0x24,
	0x02, 0x00, 0x00,
}
